Last login: Thu Feb 11 15:40:48 on ttys000
MacBook-Pro-5:~ danielmsheehan$ ipython
Python 2.7.8 (default, Sep 18 2014, 14:18:25) 
Type "copyright", "credits" or "license" for more information.

IPython 3.2.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: from scipy.io import loadmat

In [2]: news = loadmat('news.mat')
---------------------------------------------------------------------------
IOError                                   Traceback (most recent call last)
<ipython-input-2-50b41d57679e> in <module>()
----> 1 news = loadmat('news.mat')

/Library/Python/2.7/site-packages/scipy/io/matlab/mio.pyc in loadmat(file_name, mdict, appendmat, **kwargs)
    123     """
    124     variable_names = kwargs.pop('variable_names', None)
--> 125     MR = mat_reader_factory(file_name, appendmat, **kwargs)
    126     matfile_dict = MR.get_variables(variable_names)
    127     if mdict is not None:

/Library/Python/2.7/site-packages/scipy/io/matlab/mio.pyc in mat_reader_factory(file_name, appendmat, **kwargs)
     52        type detected in `filename`.
     53     """
---> 54     byte_stream = _open_file(file_name, appendmat)
     55     mjv, mnv = get_matfile_version(byte_stream)
     56     if mjv == 0:

/Library/Python/2.7/site-packages/scipy/io/matlab/mio.pyc in _open_file(file_like, appendmat)
     26                 file_like += '.mat'
     27                 return open(file_like, 'rb')
---> 28             raise IOError(e)
     29     # not a string - maybe file-like object
     30     try:

IOError: [Errno 2] No such file or directory: 'news.mat'

In [3]: exit()
MacBook-Pro-5:~ danielmsheehan$ cd /Users/danielmsheehan/GitHub/coms4721_hw1 
MacBook-Pro-5:coms4721_hw1 danielmsheehan$ from scipy.io import loadmat
from: can't read /var/mail/scipy.io
MacBook-Pro-5:coms4721_hw1 danielmsheehan$ news = loadmat('news.mat')
-bash: syntax error near unexpected token `('
MacBook-Pro-5:coms4721_hw1 danielmsheehan$ ipython
Python 2.7.8 (default, Sep 18 2014, 14:18:25) 
Type "copyright", "credits" or "license" for more information.

IPython 3.2.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: from scipy.io import loadmat

In [2]: news = loadmat('news.mat')
/usr/local/lib/python2.7/site-packages/numpy/core/fromnumeric.py:2645: VisibleDeprecationWarning: `rank` is deprecated; use the `ndim` attribute or function instead. To find the rank of a matrix see `numpy.linalg.matrix_rank`.
  VisibleDeprecationWarning)

In [3]: type(news['data']
   ...: _
   ...: )
  File "<ipython-input-3-1adcc79408f6>", line 2
    _
    ^
SyntaxError: invalid syntax


In [4]: type(news)
Out[4]: dict

In [5]: type(news['data'])
Out[5]: scipy.sparse.csc.csc_matrix

In [6]: news.shape
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-6-b3e93c2c60d3> in <module>()
----> 1 news.shape

AttributeError: 'dict' object has no attribute 'shape'

In [7]: news['data'].shape
Out[7]: (11269, 61188)

In [8]: news['labels']
Out[8]: 
array([[ 1],
       [ 1],
       [ 1],
       ..., 
       [20],
       [20],
       [20]], dtype=uint8)

In [9]: y = news['labels'].flatten()

In [10]: y
Out[10]: array([ 1,  1,  1, ..., 20, 20, 20], dtype=uint8)

In [11]: len(np.where(y==1))/float(len(y))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-11-9a20a067ad4a> in <module>()
----> 1 len(np.where(y==1))/float(len(y))

NameError: name 'np' is not defined

In [12]: import numpy as np

In [13]: len(np.where(y==1))/float(len(y))
Out[13]: 8.873901854645488e-05

In [14]: np.where(y==1)
Out[14]: 
(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
        273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
        286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
        299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
        312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
        325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
        338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
        390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
        416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
        429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
        442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
        455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
        468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479]),)

In [15]: len(np.where(y==1))
Out[15]: 1

In [16]: len(np.where(y==1)[0])
Out[16]: 480

In [17]: len(np.where(y==1)[0])/float(len(y))
Out[17]: 0.04259472890229834

In [18]: len(np.where(y==2)[0])/float(len(y))
Out[18]: 0.05155736977549028

In [19]: len(np.where(y==3)[0])/float(len(y))
Out[19]: 0.05075871860857219

In [20]: len(np.where(y==4)[0])/float(len(y))
Out[20]: 0.05208980388676901

In [21]: news
Out[21]: 
{'__globals__': [],
 '__header__': 'MATLAB 5.0 MAT-file, Platform: MACI64, Created on: Thu Feb  5 15:09:53 2015',
 '__version__': '1.0',
 'data': <11269x61188 sparse matrix of type '<type 'numpy.float64'>'
 	with 1467345 stored elements in Compressed Sparse Column format>,
 'labels': array([[ 1],
        [ 1],
        [ 1],
        ..., 
        [20],
        [20],
        [20]], dtype=uint8),
 'testdata': <7505x61188 sparse matrix of type '<type 'numpy.float64'>'
 	with 967874 stored elements in Compressed Sparse Column format>,
 'testlabels': array([[ 1],
        [ 1],
        [ 1],
        ..., 
        [20],
        [20],
        [20]], dtype=uint8)}

In [22]: Xtr = news['data']

In [23]: Xtr
Out[23]: 
<11269x61188 sparse matrix of type '<type 'numpy.float64'>'
	with 1467345 stored elements in Compressed Sparse Column format>

In [24]: Xtr.head(5)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-24-7fc26b758353> in <module>()
----> 1 Xtr.head(5)

/Library/Python/2.7/site-packages/scipy/sparse/base.pyc in __getattr__(self, attr)
    438             return self.getnnz()
    439         else:
--> 440             raise AttributeError(attr + " not found")
    441 
    442     def transpose(self):

AttributeError: head not found

In [25]: x = Xtr[0]

In [26]: x
Out[26]: 
<1x61188 sparse matrix of type '<type 'numpy.float64'>'
	with 769 stored elements in Compressed Sparse Column format>

In [27]: np.array(x)
Out[27]: 
array(<1x61188 sparse matrix of type '<type 'numpy.float64'>'
	with 769 stored elements in Compressed Sparse Column format>, dtype=object)

In [28]: x.
x.arcsin              x.getcol              x.shape
x.arcsinh             x.getformat           x.sign
x.arctan              x.getmaxprint         x.sin
x.arctanh             x.getnnz              x.sinh
x.asformat            x.getrow              x.sort_indices
x.asfptype            x.has_sorted_indices  x.sorted_indices
x.astype              x.indices             x.sqrt
x.ceil                x.indptr              x.sum
x.check_format        x.log1p               x.sum_duplicates
x.conj                x.max                 x.tan
x.conjugate           x.maxprint            x.tanh
x.copy                x.mean                x.toarray
x.data                x.min                 x.tobsr
x.deg2rad             x.multiply            x.tocoo
x.diagonal            x.ndim                x.tocsc
x.dot                 x.nnz                 x.tocsr
x.dtype               x.nonzero             x.todense
x.eliminate_zeros     x.prune               x.todia
x.expm1               x.rad2deg             x.todok
x.floor               x.reshape             x.tolil
x.format              x.rint                x.transpose
x.getH                x.set_shape           x.trunc
x.get_shape           x.setdiag             

In [28]: x.
x.arcsin              x.getcol              x.shape
x.arcsinh             x.getformat           x.sign
x.arctan              x.getmaxprint         x.sin
x.arctanh             x.getnnz              x.sinh
x.asformat            x.getrow              x.sort_indices
x.asfptype            x.has_sorted_indices  x.sorted_indices
x.astype              x.indices             x.sqrt
x.ceil                x.indptr              x.sum
x.check_format        x.log1p               x.sum_duplicates
x.conj                x.max                 x.tan
x.conjugate           x.maxprint            x.tanh
x.copy                x.mean                x.toarray
x.data                x.min                 x.tobsr
x.deg2rad             x.multiply            x.tocoo
x.diagonal            x.ndim                x.tocsc
x.dot                 x.nnz                 x.tocsr
x.dtype               x.nonzero             x.todense
x.eliminate_zeros     x.prune               x.todia
x.expm1               x.rad2deg             x.todok
x.floor               x.reshape             x.tolil
x.format              x.rint                x.transpose
x.getH                x.set_shape           x.trunc
x.get_shape           x.setdiag             

In [28]: x.toarray()
Out[28]: array([[ 1.,  1.,  1., ...,  0.,  0.,  0.]])

In [29]: Ytr = news['labels'].flatten()

In [30]: Ytr
Out[30]: array([ 1,  1,  1, ..., 20, 20, 20], dtype=uint8)

In [31]: idx = Ytr[Ytr==1]

In [32]: idx
Out[32]: 
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=uint8)

In [33]: Ytr
Out[33]: array([ 1,  1,  1, ..., 20, 20, 20], dtype=uint8)

In [34]: Ytr==1
Out[34]: array([ True,  True,  True, ..., False, False, False], dtype=bool)

In [35]: idx = np.where(Ytr==1)

In [36]: idx
Out[36]: 
(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
        273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
        286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
        299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
        312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
        325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
        338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
        390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
        416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
        429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
        442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
        455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
        468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479]),)

In [37]: x_1 = Xtr[idx]

In [38]: len(np.where(Ytr==1))
Out[38]: 1

In [39]: len(np.where(Ytr==1)[0])
Out[39]: 480

In [40]: idx
Out[40]: 
(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
        273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
        286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
        299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
        312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
        325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
        338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
        390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
        416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
        429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
        442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
        455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
        468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479]),)

In [41]: x_1 = Xtr[idx[0]]

In [42]: x_1.shape
Out[42]: (480, 61188)

In [43]: len(Ytr)
Out[43]: 11269

In [44]: x_1.sum()
Out[44]: 72978.0

In [45]: x_1.sum(axis=1)
Out[45]: 
matrix([[  769.],
        [  125.],
        [   29.],
        [   51.],
        [  198.],
        [   34.],
        [   64.],
        [  107.],
        [   50.],
        [  185.],
        [  218.],
        [  128.],
        [   66.],
        [  442.],
        [   54.],
        [   34.],
        [   65.],
        [  217.],
        [  473.],
        [   93.],
        [   64.],
        [   89.],
        [   78.],
        [   77.],
        [   66.],
        [  123.],
        [   85.],
        [  109.],
        [   78.],
        [  282.],
        [   32.],
        [   66.],
        [   94.],
        [  128.],
        [  169.],
        [  110.],
        [   44.],
        [  547.],
        [   79.],
        [   67.],
        [   87.],
        [  113.],
        [  168.],
        [  475.],
        [  134.],
        [   91.],
        [ 1220.],
        [  153.],
        [  127.],
        [   77.],
        [  147.],
        [  134.],
        [  248.],
        [  387.],
        [  112.],
        [  233.],
        [  144.],
        [   67.],
        [  197.],
        [  111.],
        [  112.],
        [  177.],
        [  172.],
        [  295.],
        [  307.],
        [  145.],
        [  120.],
        [   50.],
        [  107.],
        [  101.],
        [  145.],
        [  109.],
        [  226.],
        [  192.],
        [  292.],
        [  136.],
        [  314.],
        [   96.],
        [  313.],
        [  197.],
        [   91.],
        [  329.],
        [   56.],
        [   67.],
        [  102.],
        [  129.],
        [   55.],
        [   98.],
        [   66.],
        [  125.],
        [   55.],
        [  141.],
        [   98.],
        [  108.],
        [  168.],
        [  107.],
        [   89.],
        [   83.],
        [  167.],
        [  131.],
        [   50.],
        [  106.],
        [  179.],
        [  227.],
        [   83.],
        [   63.],
        [   98.],
        [   62.],
        [   85.],
        [   67.],
        [  187.],
        [   66.],
        [   90.],
        [  192.],
        [  128.],
        [   39.],
        [   65.],
        [  107.],
        [  224.],
        [  149.],
        [   91.],
        [  149.],
        [   70.],
        [   66.],
        [  405.],
        [  207.],
        [  145.],
        [  142.],
        [  602.],
        [  147.],
        [   56.],
        [   71.],
        [   58.],
        [  189.],
        [  206.],
        [  187.],
        [   78.],
        [   58.],
        [   62.],
        [  164.],
        [  147.],
        [   91.],
        [   87.],
        [  189.],
        [   87.],
        [   73.],
        [  115.],
        [   53.],
        [  119.],
        [  116.],
        [  144.],
        [  183.],
        [   97.],
        [  117.],
        [  140.],
        [   40.],
        [   69.],
        [  317.],
        [  273.],
        [  226.],
        [  175.],
        [   42.],
        [  195.],
        [  104.],
        [  147.],
        [  132.],
        [  168.],
        [  292.],
        [   85.],
        [  129.],
        [  123.],
        [  379.],
        [  203.],
        [  411.],
        [  138.],
        [   90.],
        [   51.],
        [  318.],
        [  141.],
        [  125.],
        [   81.],
        [  118.],
        [  344.],
        [  179.],
        [  308.],
        [  550.],
        [  110.],
        [   50.],
        [   59.],
        [  207.],
        [  120.],
        [  115.],
        [  212.],
        [  109.],
        [  105.],
        [ 1240.],
        [  173.],
        [  180.],
        [  243.],
        [  174.],
        [  156.],
        [  195.],
        [  179.],
        [  319.],
        [  354.],
        [   76.],
        [  297.],
        [   95.],
        [  121.],
        [  203.],
        [  135.],
        [  102.],
        [   62.],
        [  192.],
        [   79.],
        [  191.],
        [  174.],
        [   43.],
        [  164.],
        [   28.],
        [   95.],
        [  138.],
        [  185.],
        [   95.],
        [   15.],
        [  180.],
        [  118.],
        [   73.],
        [  127.],
        [  194.],
        [   76.],
        [  278.],
        [   65.],
        [   66.],
        [   83.],
        [  296.],
        [  104.],
        [   85.],
        [  119.],
        [  123.],
        [  163.],
        [  104.],
        [  272.],
        [   93.],
        [  119.],
        [  129.],
        [  202.],
        [  145.],
        [  152.],
        [  186.],
        [   83.],
        [  128.],
        [  116.],
        [   77.],
        [  239.],
        [  107.],
        [  130.],
        [   80.],
        [  115.],
        [  105.],
        [  206.],
        [  166.],
        [   36.],
        [  105.],
        [   66.],
        [  122.],
        [  165.],
        [   68.],
        [  107.],
        [   90.],
        [  154.],
        [  235.],
        [  162.],
        [   90.],
        [  181.],
        [  106.],
        [  119.],
        [   64.],
        [   41.],
        [  205.],
        [  106.],
        [  157.],
        [  147.],
        [  106.],
        [  192.],
        [   60.],
        [   97.],
        [  113.],
        [  261.],
        [   60.],
        [  141.],
        [  124.],
        [  105.],
        [  110.],
        [  119.],
        [  165.],
        [  214.],
        [  133.],
        [  102.],
        [  206.],
        [   58.],
        [   75.],
        [  131.],
        [  134.],
        [  127.],
        [  140.],
        [  160.],
        [  135.],
        [  131.],
        [  118.],
        [  107.],
        [   66.],
        [  177.],
        [  100.],
        [   49.],
        [   86.],
        [   84.],
        [   79.],
        [   77.],
        [  183.],
        [   65.],
        [   92.],
        [   58.],
        [  128.],
        [  137.],
        [   95.],
        [  175.],
        [  224.],
        [  106.],
        [  158.],
        [  121.],
        [  133.],
        [  123.],
        [   55.],
        [  207.],
        [  424.],
        [  144.],
        [  131.],
        [   51.],
        [   96.],
        [   87.],
        [  160.],
        [  148.],
        [  116.],
        [  143.],
        [   48.],
        [  135.],
        [   69.],
        [   82.],
        [   61.],
        [   19.],
        [  162.],
        [  103.],
        [   61.],
        [   92.],
        [  389.],
        [  120.],
        [  511.],
        [   17.],
        [   60.],
        [   37.],
        [   87.],
        [  145.],
        [   73.],
        [  160.],
        [   47.],
        [   31.],
        [ 1693.],
        [  110.],
        [  207.],
        [   84.],
        [   89.],
        [  223.],
        [   18.],
        [   84.],
        [   72.],
        [   91.],
        [  109.],
        [  169.],
        [  101.],
        [   33.],
        [   56.],
        [  124.],
        [  139.],
        [   69.],
        [  191.],
        [   58.],
        [   69.],
        [  295.],
        [   64.],
        [  187.],
        [  173.],
        [   53.],
        [   52.],
        [   61.],
        [   97.],
        [   81.],
        [  224.],
        [   41.],
        [  104.],
        [  145.],
        [  196.],
        [  120.],
        [   44.],
        [  211.],
        [  309.],
        [  103.],
        [  260.],
        [  195.],
        [  211.],
        [  136.],
        [   39.],
        [  173.],
        [  108.],
        [   96.],
        [   97.],
        [   50.],
        [   72.],
        [   97.],
        [   92.],
        [   31.],
        [   90.],
        [  549.],
        [   74.],
        [   77.],
        [   78.],
        [  313.],
        [  157.],
        [  136.],
        [   97.],
        [   45.],
        [  986.],
        [  395.],
        [  199.],
        [  186.],
        [   96.],
        [  630.],
        [  151.],
        [  259.],
        [  192.],
        [   54.],
        [  279.],
        [  136.],
        [  258.],
        [  128.],
        [  121.],
        [  180.],
        [   88.],
        [  246.],
        [   22.],
        [   65.],
        [   83.],
        [  206.],
        [  119.],
        [  105.],
        [  155.],
        [  144.],
        [   78.],
        [  135.],
        [  105.],
        [   96.],
        [  137.],
        [  128.],
        [  181.],
        [  366.],
        [   63.],
        [   53.],
        [   62.],
        [  137.],
        [   27.],
        [   67.],
        [  140.],
        [   98.],
        [  100.],
        [  383.],
        [   50.],
        [  256.],
        [   74.],
        [  297.],
        [  793.]])

In [46]: x_1.sum(axis=1).shape
Out[46]: (480, 1)

In [47]: x_1.sum(axis=0).shape
Out[47]: (1, 61188)

In [48]: x_1.sum(axis=0) / 480.0
Out[48]: 
matrix([[ 0.01041667,  0.07916667,  0.17083333, ...,  0.        ,
          0.        ,  0.        ]])

In [49]: (1 + x_1.sum(axis=0)) / 482.0
Out[49]: 
matrix([[ 0.01244813,  0.08091286,  0.17219917, ...,  0.00207469,
          0.00207469,  0.00207469]])

In [50]: Ytr
Out[50]: array([ 1,  1,  1, ..., 20, 20, 20], dtype=uint8)

In [51]: set(Ytr)
Out[51]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}

In [52]: len(np.where(Ytr==1)id[0])
KeyboardInterrupt

In [52]: idx
Out[52]: 
(array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
        273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
        286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
        299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
        312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
        325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
        338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
        351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
        377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
        390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
        416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
        429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
        442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
        455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
        468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479]),)

In [53]: idx[0]
Out[53]: 
array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
       390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
       403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
       416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
       429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
       442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
       455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
       468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479])

In [54]: len(idx[0])
Out[54]: 480

In [55]: d = {}

In [56]: d
Out[56]: {}

In [57]: labelY = 1

In [58]: d['labelY'] = 'hello world'

In [59]: d
Out[59]: {'labelY': 'hello world'}

In [60]:  d[labelY] = 'hello world'

In [61]: d
Out[61]: {1: 'hello world', 'labelY': 'hello world'}

In [62]: d = {}

In [63]: d[labelY] = 'hello world'

In [64]: d = {}

In [65]: d[labelY] = 'za','ya'

In [66]: d
Out[66]: {1: ('za', 'ya')}

In [67]: d[1][0]
Out[67]: 'za'

In [68]: d[1][1]
Out[68]: 'ya'

In [69]: d[1] = {'bias':0.5, 'weights':1}

In [70]: d[1]['bias']
Out[70]: 0.5

In [71]: d[1]['weights']
Out[71]: 1

In [72]: log(1)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-72-cfa4946d0225> in <module>()
----> 1 log(1)

NameError: name 'log' is not defined

In [73]: np.log(np.array([1,2,3]))
Out[73]: array([ 0.        ,  0.69314718,  1.09861229])

In [74]: np.log(np.array([1,2,3])).sum()
Out[74]: 1.791759469228055

In [75]: 
